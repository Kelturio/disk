#!/bin/bash

# Created by argbash-init v2.8
# ARG_OPTIONAL_SINGLE([option])
# ARG_OPTIONAL_BOOLEAN([faketty],[f],[Run the script in a faketty])
# ARG_POSITIONAL_SINGLE([disk],[KNAME internal kernel device name, like sdx])
# ARG_POSITIONAL_SINGLE([dt],[DT external device tag, primary key for db, used as dir name (forbidden chars: /)])
# ARGBASH_SET_DELIM([ =])
# ARG_OPTION_STACKING([getopt])
# ARG_RESTRICT_VALUES([no-local-options])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


evaluate_strictness()
{
	[[ "$2" =~ ^-(-(option|faketty|disk|dt|help)$|[fh]) ]] && die "You have passed '$2' as a value of argument '$1', which makes it look like that you have omitted the actual value, since '$2' is an option accepted by this script. This is considered a fatal error."
}


begins_with_short_option()
{
	local first_option all_short_options='fh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_disk=
_arg_dt=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_option=
_arg_faketty="off"


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [--option <arg>] [-f|--(no-)faketty] [-h|--help] <disk> <dt>\n' "$0"
	printf '\t%s\n' "<disk>: KNAME internal kernel device name, like sdx"
	printf '\t%s\n' "<dt>: DT external device tag, primary key for db, used as dir name (forbidden chars: /)"
	printf '\t%s\n' "-f, --faketty, --no-faketty: Run the script in a faketty (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--option)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_option="$2"
				shift
				evaluate_strictness "$_key" "$_arg_option"
				;;
			--option=*)
				_arg_option="${_key##--option=}"
				evaluate_strictness "$_key" "$_arg_option"
				;;
			-f|--no-faketty|--faketty)
				_arg_faketty="on"
				test "${1:0:5}" = "--no-" && _arg_faketty="off"
				;;
			-f*)
				_arg_faketty="on"
				_next="${_key##-f}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'disk' and 'dt'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_disk _arg_dt "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
